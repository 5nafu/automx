<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Basic Configuration</title>

    <authorgroup>
      <author>
        <firstname>Christian</firstname>

        <surname>Rößner</surname>

        <contrib>Wrote the program.</contrib>

        <email>cr@sys4.de</email>
      </author>

      <editor>
        <firstname>Patrick</firstname>

        <othername>Ben</othername>

        <surname>Koetter</surname>

        <contrib>Wrote the documentation.</contrib>

        <email>p@sys4.de</email>
      </editor>
    </authorgroup>
  </articleinfo>

  <abstract>
    <para>This document contains information for initial and/or basic
    configuration of automx.</para>
  </abstract>

  <para>automx reads runtime behaviour and all settings controlling a domains
  account provisioning from a single configuration file. By default automx
  expects to find this file at <filename>/etc/automx.conf</filename>.</para>

  <section>
    <title>Format</title>

    <para>The general format of the <filename>automx.conf</filename> file is
    as follows:</para>

    <itemizedlist>
      <listitem>
        <para>The basic element contained in an INI file is the property.
        Every property has a name and a value, delimited by an equals sign
        (<quote>=</quote>). The name appears to the left of the equals
        sign.</para>
      </listitem>

      <listitem>
        <para>Properties are grouped into sections. The section name appears
        on a line by itself, in square brackets (<quote>[</quote> and
        <quote>]</quote>). All properties after the section declaration are
        associated with that section. There is no explicit <quote>end of
        section</quote> delimiter; sections end at the next section
        declaration, or the end of the file. Sections may not be
        nested.</para>
      </listitem>

      <listitem>
        <para>Section and property names are case sensitive.</para>
      </listitem>

      <listitem>
        <para>A line with a number sign (<quote>#</quote>) begins a comment.
        Anything following a number sign will be ignored by automx.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Sections</title>

    <para>Sections create a namespace in which properties specific to a domain
    are defined. The section name identifies the domain. The three section
    names <option>[automx]</option>, <option>[DEFAULT]</option> and
    <option>[global]</option> are reserved for special purposes within
    automx.</para>

    <section>
      <title>[automx]</title>

      <subtitle>Controlling automx Runtime Behaviour</subtitle>

      <para>This section is mandatory - it lists all options controlling
      automx runtime behaviour. The properties <parameter>provider</parameter>
      and <parameter>domains</parameter> are also mandatory. Usage of
      <parameter>memcache</parameter> and all of its associated properties is
      highly recommended.</para>

      <example>
        <title>[automx]</title>

        <para>The following example shows a typical <option>[automx]</option>
        section setup:</para>

        <programlisting>[automx]
provider = example.com <co id="automx_provider"/>
domains = * <co id="automx_domains"/>
logfile = /var/log/automx/automx.log <co id="automx_logfile"/>
debug = yes <co id="automx_debug"/>
memcache = 127.0.0.1:11211 <co id="automx_memcache"/>
memcache_ttl = 86400
client_error_limit = 5 <co id="automx_client_error_limit"/>
rate_limit_exception_networks = 127.0.0.0/8, ::1/128 <co
            id="automx_rate_limit_exception_networks"/></programlisting>

        <calloutlist>
          <callout arearefs="automx_provider">
            <para>The <parameter>provider</parameter> property configures
            automx to identify the webservice as
            <option>example.com</option>.</para>
          </callout>

          <callout arearefs="automx_domains">
            <para>The wildcard option <option>*</option> used in
            <parameter>domains</parameter> instructs automx to answer any
            configuration request regardless of the domain sent by the mail
            client.</para>
          </callout>

          <callout arearefs="automx_logfile">
            <para>All log information should go to
            /var/log/automx/automx.log.</para>
          </callout>

          <callout arearefs="automx_debug">
            <para>Debugging is enabled and infos will be sent to
            <parameter>logfile</parameter>.</para>
          </callout>

          <callout arearefs="automx_memcache">
            <para>Statistical data controlling errors caused by clients
            accessing database backends will be sent to the specified
            <systemitem class="daemon">memcache</systemitem> service.</para>
          </callout>

          <callout arearefs="automx_client_error_limit">
            <para>In this example a client may not cause more than
            <option>5</option> errors before automx will refuse to answer
            further queries.</para>
          </callout>

          <callout arearefs="automx_rate_limit_exception_networks">
            <para>Clients listed in
            <parameter>rate_limit_exception_networks</parameter> are excluded
            from rate limiting.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>[DEFAULT]</title>

      <subtitle>Properties present in all other sections</subtitle>

      <para>This section is optional. Settings in this section define
      properties which will be present in all other sections. It is useful to
      avoid redundancy.</para>

      <example>
        <title>[DEFAULT]</title>

        <para>The following example shows a typical <option>[DEFAULT]</option>
        section setup:</para>

        <programlisting>[DEFAULT]
action = settings <co id="DEFAULT_action"/>

account_type = email <co id="DEFAULT_account_type"/>
account_name = Example Inc. <co id="DEFAULT_account_name"/>
account_name_short = Example <co id="DEFAULT_account_name_short"/></programlisting>

        <calloutlist>
          <callout arearefs="DEFAULT_action">
            <para>The default action for automx is to provide account
            settings.</para>

            <note>
              <para>The Microsoft schema forsees other actions that account
              provisioning.</para>
            </note>
          </callout>

          <callout arearefs="DEFAULT_account_type">
            <para>The <parameter>account_type</parameter> should be an email
            account.</para>
          </callout>

          <callout arearefs="DEFAULT_account_name">
            <para>The account should show up as <option>Example Inc.</option>
            in the clients account list.</para>
          </callout>

          <callout arearefs="DEFAULT_account_name_short">
            <para>The accounts short name should be
            <option>Example</option>.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>[global]</title>

      <subtitle>A global backend</subtitle>

      <para>Setting this section is mandatory, but it may remain empty. It
      provides a backend, which will be used whenever automx should serve a
      domain, but no section with domain-specific settings has been
      specified.</para>

      <para>Other sections may either explicitly or implicitly refer to the
      <option>[global]</option> section as a whole. An explicit reference
      specifies <option>global</option> as backend property. Implicit
      references simply announce the domain in automx'
      <parameter>domains</parameter> list and omit an explicit section
      definition for that domain.</para>

      <note>
        <para>This is useful when many domains should use the same backend or
        when automx domain property configures it to run as wildcard
        service.</para>
      </note>

      <example>
        <title>[global]</title>

        <para>The following example configures automx to query a LDAP
        directory service. Refer to <citerefentry>
            <refentrytitle>automx_ldap</refentrytitle>

            <manvolnum>5</manvolnum>
          </citerefentry> for a detailed discussion of parameters and their
        meaning.</para>

        <programlisting>[global]
backend = ldap

account_name = ${cn} (Example Inc.)
display_name = ${givenName} ${sn}

smtp = yes
smtp_server = mail.example.com
smtp_port = 587
smtp_encryption = starttls
smtp_auth = plaintext
smtp_auth_identity = ${mail}
smtp_expiration_date = 2012-12-31
smtp_refresh_ttl = 0
smtp_default = yes

imap = yes
imap_server = mail.example.com
imap_port = 993
imap_encryption = ssl
imap_auth = plaintext
imap_auth_identity = ${mail}
imap_expiration_date = 2012-12-31
imap_refresh_ttl = 0

pop = no
pop_server = mail.example.com
pop_port = 995
pop_encryption = ssl
pop_auth = plaintext
pop_auth_identity = ${mail}
pop_expiration_date = 2012-12-31
pop_refresh_ttl = 0

host = ldap://ldap.example.com
base = ou=people,dc=example,dc=com
result_attrs = mail, cn, givenName, sn
scope = sub
filter = (&amp;(objectClass=*)(uniqueIdentifier=%s))

bindmethod = sasl
saslmech = EXTERNAL
usetls = yes
reqcert = demand
cert = /etc/ssl/certs/mail.example.com.crt.pem
key = /etc/ssl/private/mail.example.com.key.pem
cacert = /etc/ssl/certs/ca-certificates.crt</programlisting>
      </example>
    </section>
  </section>
</article>
