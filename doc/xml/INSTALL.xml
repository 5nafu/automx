<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>INSTALL</title>

    <authorgroup>
      <author>
        <firstname>Christian</firstname>

        <surname>Roessner</surname>

        <contrib>Wrote the program.</contrib>

        <email>cr@sys4.de</email>
      </author>

      <editor>
        <firstname>Patrick</firstname>

        <othername>Ben</othername>

        <surname>Koetter</surname>

        <contrib>Wrote the documentation.</contrib>

        <email>p@sys4.de</email>
      </editor>
    </authorgroup>
  </articleinfo>

  <abstract>
    <para>This document contains step by step instructions to install
    automx.</para>
  </abstract>

  <section id="download">
    <title>automx Download</title>

    <para>If you haven't done so yet <ulink
    url="http://automx.org/download/latest.tar.gz">download automx</ulink>
    from its website.</para>

    <screen>$ wget http://automx.org/download/latest.tar.gz</screen>

    <para>Unpack the tar archive and change into the newly created
    directory.</para>

    <screen>$ tar xzf latest.tar.gz
$ cd automx-<replaceable>VERSION</replaceable></screen>
  </section>

  <section id="requirements">
    <title>Software Requirements</title>

    <para>automx is a Python application. You must install a few extra modules
    to handle frontend and backend communication as well to deal with XML
    data.</para>

    <variablelist>
      <varlistentry>
        <term>frontend</term>

        <listitem>
          <para>Install <package>mod_wsgi</package> for the Apache web server
          and the <package>python-wsgi</package> module.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>backend (optional)</term>

        <listitem>
          <para>If you plan to use either LDAP or SQL as backends to retrieve
          configuration options from install <package>ldap</package> for LDAP
          and <package>python-sqlalchemy</package> for SQL. Further you also
          need to install the SQL backend driver that communicates with your
          database. For MySQL this might be <package>mysqldb</package>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>XML handling</term>

        <listitem>
          <para>Install python lxml or automx will not be able to handle the
          XML data it needs to deal with.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Once you've satisfied the requirements, you can start to install
    automx.</para>
  </section>

  <section id="install">
    <title>Installing automx</title>

    <para>automx is a wsgi script depending on some automx-specific libraries.
    It reads its configuration from a single configuration file. The program,
    the libraries and the configuration file need to be installed at different
    locations.</para>

    <section id="install_automx">
      <title>Installing the program</title>

      <para>Create a directory for the automx program and copy it to that
      location:</para>

      <screen>% <command>mkdir</command> <option>-p</option> /usr/local/lib/automx
% <command>cp</command> automx-VERSION/automx.wsgi /usr/local/lib/automx/</screen>
    </section>

    <section id="install_automx-test">
      <title>Installing the test program</title>

      <para>Copy the <command>automx-test</command> program to a location that
      is in your <systemitem>$PATH</systemitem>:</para>

      <screen>% <command>cp</command> automx-VERSION/automx-test /usr/local/bin/automx-test</screen>
    </section>

    <section id="install_libraries">
      <title>Installing automx-specific libraries</title>

      <para>Python provides a directory with site specific packages, called
      site-packages. Copy the automx directory including all its files to
      site-packages:</para>

      <screen>% <command>cp</command> automx-VERSION/automx <replaceable>/usr/local/lib/python2.6/site-packages/</replaceable></screen>

      <note>
        <title>site-packages</title>

        <para>The location of that directory depends on the Python version and
        the distribution you use.</para>
      </note>
    </section>

    <section id="install_configuration">
      <title>Installing the configuration file</title>

      <para>Place the sample automx.conf file into /etc.</para>

      <screen>% <command>cp</command> automx-VERSION/src/conf/automx.conf /etc/</screen>

      <para>Follow <citerefentry>
          <refentrytitle>automx.conf</refentrytitle>

          <manvolnum>5</manvolnum>
        </citerefentry> Adopt this configuration file to your needs. You may
      find detailed information in the man page automx.conf(5).</para>

      <tip>
        <para>Set <parameter>debug</parameter>=<option>yes</option> in the
        section <parameter>automx</parameter> while you setup, configure and
        test <systemitem>automx</systemitem>. It will help you detect problems
        more easily. This will log the request GET/POST and the response to
        the error.log file(s).</para>
      </tip>
    </section>

    <section id="install_man-pages">
      <title>Installing man Pages</title>

      <para>Try using the <command>manpath</command> command to find out where
      man pages are stored on your computer:</para>

      <screen>$ <command>manpath</command> 
/usr/local/man:/usr/local/share/man:/usr/share/man</screen>

      <para>Copy the man pages to that location.</para>

      <screen>% <command>cp</command> <option>-a</option> automx-VERSION/doc/man/ /usr/local/share/man</screen>
    </section>
  </section>

  <section id="dns">
    <title>DNS Configuration</title>

    <para>Mail clients seeking mail account autoconfiguration will either
    request an IP address for
    <systemitem>autoconfig.<replaceable>example.com</replaceable></systemitem>
    (Mozilla schema) or
    <systemitem>autodiscover.<replaceable>example.com</replaceable></systemitem>
    (Microsoft schema). Provide settings in your DNS that directs them to the
    server running the <package>automx</package> service:</para>

    <programlisting>autoconfig.example.com.       IN    A     192.168.2.1
autodiscover.example.com.     IN    A     192.168.2.1</programlisting>
  </section>

  <section id="webserver">
    <title>Web Server Configuration</title>

    <para>Finally configure the web server. It will accept configuration
    requests from mail clients, pass the information to automx and in turn
    will respond with account profiles once automx has figured out the
    details.</para>

    <para>First enable the wsgi module. Follow your OS documentation to find
    out how it needs to be done.</para>

    <para>automx is able to provision mail clients following the Mozilla
    autoconfig schema as well as mail clients following the Microsoft
    autodiscover schema. Both schemas have different requirements regarding
    hostname, port and level of security when a request is sent to the
    configuration server:</para>

    <variablelist>
      <varlistentry>
        <term>Microsoft</term>

        <listitem>
          <para>Mail clients following the Microsoft autodiscover schema
          require a https connection. The web server must identify itself as
          autodiscover.<replaceable>example.com</replaceable> on port
          <systemitem class="protocol">443</systemitem> and it must use a
          valid server certificate that is trusted by the mail client
          requesting configuration.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Mozilla</term>

        <listitem>
          <para>Mail clients following the Mozilla autoconfig schema can use
          either a http or a https connection. The web server must identify
          itself as autoconfig.<replaceable>example.com</replaceable> on port
          <systemitem class="protocol">80</systemitem> or <systemitem
          class="protocol">443</systemitem>. If it connects on <systemitem
          class="protocol">443</systemitem> a valid server certificate that is
          trusted by the mail client requesting configuration has to be
          used.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Here is a simple example that configures an autoconfig and an
    autodiscover service - both use the same automx script:</para>

    <programlisting>&lt;VirtualHost *:80&gt;

  ServerName example.com
  ServerAlias autoconfig.example.com
  ServerAdmin webmaster@example.com

  &lt;IfModule mod_wsgi.c&gt;
    WSGIScriptAlias /mail/config-v1.1.xml /usr/local/lib/automx/automx.wsgi
    &lt;Directory "/usr/local/lib/automx"&gt;
      Order allow,deny
      Allow from all
    &lt;/Directory&gt;
  &lt;/IfModule&gt;

&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;

  ServerName example.com:443
  ServerAlias autoconfig.example.com:443
  ServerAdmin webmaster@example.com

  &lt;IfModule mod_wsgi.c&gt;
    WSGIScriptAlias /Autodiscover/Autodiscover.xml /usr/local/lib/automx/automx.wsgi
    WSGIScriptAlias /autodiscover/autodiscover.xml /usr/local/lib/automx/automx.wsgi
    &lt;Directory "/usr/local/lib/automx"&gt;
      Order allow,deny
      Allow from all
    &lt;/Directory&gt;
  &lt;/IfModule&gt;

&lt;/VirtualHost&gt;</programlisting>

    <note>
      <title>ISPs</title>

      <para>In an advanced environment with thousands of domains, you can
      redirect mail clients via DNS entries to your ISP
      <systemitem>automx</systemitem> provisioning server for Microsoft
      clients and a web server instance with a wild card
      <parameter>ServerName</parameter> <option>autoconfig.*</option> to serve
      the Mozilla schema.</para>

      <programlisting>autoconfig.example.com.       IN    A     192.168.2.1
autodiscover.example.com.     IN    A     192.168.2.1</programlisting>
    </note>

    <para>automx comes with a little utility that helps testing proper
    operation. The next section explains how to use it.</para>
  </section>

  <section id="testing">
    <title>Testing And Debugging automx</title>

    <para>The automx-test utility sends configuration requests for Microsoft
    and Mozilla clients to the web server:</para>

    <screen>$ <command>automx-test</command> <option><replaceable>user@example.com</replaceable></option> <co
        id="testid"/></screen>

    <calloutlist>
      <callout arearefs="testid">
        <para>The domainpart in the address determines the list of hostnames
        that will be queried. In this example
        <systemitem>autoconfig.example.com</systemitem> and
        <systemitem>autodiscover.example.com</systemitem> will be
        contacted.</para>
      </callout>
    </calloutlist>

    <para>You should see the web server header and get XML results from the
    server.</para>

    <para>If things go wrong, the
    <filename><filename>error.log</filename></filename> is your friend. It
    will indicate configuration issues, if python modules are missing, if your
    database can not be queried or anything else that might go wrong.</para>

    <note>
      <para>If you split error logs by port, e.g. port
      <systemitem>80</systemitem> and <systemitem>443</systemitem>, you need
      to check both. Autoconfig requests will mostly show up in the port
      <systemitem>80</systemitem> <filename>error.log</filename>, whereas
      autodiscover will only show up in your <systemitem>443</systemitem>
      <filename>error.log</filename>.</para>
    </note>
  </section>
</article>
